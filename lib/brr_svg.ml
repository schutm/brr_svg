module NS = struct
  type t = Jstr.t

  let xlink = Jstr.v "http://www.w3.org/1999/xlink" 
  let xml = Jstr.v "http://www.w3.org/XML/1998/namespace"
end

module At = struct
  module Name = struct
    let accentheight = Jstr.v "accent-height"
    let accumulate = Jstr.v "accumulate"
    let additive = Jstr.v "additive"
    let alignmentbaseline = Jstr.v "alignment-baseline"
    let alphabetic = Jstr.v "alphabetic"
    let amplitude = Jstr.v "amplitude"
    let arabicform = Jstr.v "arabic-form"
    let ascent = Jstr.v "ascent"
    let attributename = Jstr.v "attributeName"
    let attributetype = Jstr.v "attributeType"
    let azimuth = Jstr.v "azimuth"
    let basefrequency = Jstr.v "baseFrequency"
    let baselineshift = Jstr.v "baseline-shift"
    let baseprofile = Jstr.v "baseProfile"
    let bbox = Jstr.v "bbox"
    let begin' = Jstr.v "begin"
    let bias = Jstr.v "bias"
    let by = Jstr.v "by"
    let calcmode = Jstr.v "calcMode"
    let capheight = Jstr.v "cap-height"
    let class' = Jstr.v "class"
    let clip = Jstr.v "clip"
    let clippath = Jstr.v "clip-path"
    let clippathunits = Jstr.v "clipPathUnits"
    let cliprule = Jstr.v "clip-rule"
    let color = Jstr.v "color"
    let colorinterpolation = Jstr.v "color-interpolation"
    let colorinterpolationfilters = Jstr.v "color-interpolation-filters"
    let colorprofile = Jstr.v "color-profile"
    let colorrendering = Jstr.v "color-rendering"
    let contentscripttype = Jstr.v "contentScriptType"
    let contentstyletype = Jstr.v "contentStyleType"
    let cursor = Jstr.v "cursor"
    let cx = Jstr.v "cx"
    let cy = Jstr.v "cy"
    let d = Jstr.v "d"
    let descent = Jstr.v "descent"
    let diffuseconstant = Jstr.v "diffuseConstant"
    let direction = Jstr.v "direction"
    let display = Jstr.v "display"
    let divisor = Jstr.v "divisor"
    let dominantbaseline = Jstr.v "dominant-baseline"
    let dur = Jstr.v "dur"
    let dx = Jstr.v "dx"
    let dy = Jstr.v "dy"
    let edgemode = Jstr.v "edgeMode"
    let elevation = Jstr.v "elevation"
    let enablebackground = Jstr.v "enable-background"
    let end' = Jstr.v "end"
    let exponent = Jstr.v "exponent"
    let externalresourcesrequired = Jstr.v "externalResourcesRequired"
    let fill = Jstr.v "fill"
    let fillopacity = Jstr.v "fill-opacity"    
    let fillrule = Jstr.v "fill-rule"
    let filter = Jstr.v "filter"
    let filterres = Jstr.v "filterRes"
    let filterunits = Jstr.v "filterUnits"
    let floodcolor = Jstr.v "flood-color"
    let floodopacity = Jstr.v "flood-opacity"
    let fontfamily = Jstr.v "font-family"
    let fontsize = Jstr.v "font-size"
    let fontsizeadjust = Jstr.v "font-size-adjust"
    let fontstretch = Jstr.v "font-stretch"
    let fontstyle = Jstr.v "font-style"
    let fontvariant = Jstr.v "font-variant"
    let fontweight = Jstr.v "font-weight"
    let format = Jstr.v "format"
    let from = Jstr.v "from"
    let fx = Jstr.v "fx"
    let fy = Jstr.v "fy"
    let g1 = Jstr.v "g1"
    let g2 = Jstr.v "g2"
    let glyphname = Jstr.v "glyph-name"
    let glyphorientationhorizontal = Jstr.v "glyph-orientation-horizontal"
    let glyphorientationvertical = Jstr.v "glyph-orientation-vertical"
    let glyphref = Jstr.v "glyphRef"
    let gradienttransform = Jstr.v "gradientTransform"
    let gradientunits = Jstr.v "gradientUnits"
    let hanging = Jstr.v "hanging"
    let height = Jstr.v "height"
    let horizadvx = Jstr.v "horiz-adv-x"
    let horizoriginx = Jstr.v "horiz-origin-x"
    let horizoriginy = Jstr.v "horiz-origin-y"
    let id = Jstr.v "id"
    let ideographic = Jstr.v "ideographic"
    let imagerendering = Jstr.v "image-rendering"
    let in' = Jstr.v "in"
    let in2 = Jstr.v "in2"
    let intercept = Jstr.v "intercept"
    let k = Jstr.v "k"
    let k1 = Jstr.v "k1"
    let k2 = Jstr.v "k2"
    let k3 = Jstr.v "k3"
    let k4 = Jstr.v "k4"
    let kernelmatrix = Jstr.v "kernelMatrix"
    let kernelunitlength = Jstr.v "kernelUnitLength"
    let kerning = Jstr.v "kerning"
    let keypoints = Jstr.v "keyPoints"
    let keysplines = Jstr.v "keySplines"
    let keyTimes = Jstr.v "keyTimes"
    let lang = Jstr.v "lang"
    let lengthadjust = Jstr.v "lengthAdjust"
    let letterspacing = Jstr.v "letter-spacing"
    let lightingcolor = Jstr.v "lighting-color"
    let limitingconeangle = Jstr.v "limitingConeAngle"
    let local = Jstr.v "local"
    let markerend = Jstr.v "marker-end"
    let markerheight = Jstr.v "markerHeight"
    let markermid = Jstr.v "marker-mid"
    let markerstart = Jstr.v "marker-start"
    let markerunits = Jstr.v "markerUnits"
    let markerwidth = Jstr.v "markerWidth"
    let mask = Jstr.v "mask"
    let maskcontentunits = Jstr.v "maskContentUnits"
    let maskunits = Jstr.v "maskUnits"
    let mathematical = Jstr.v "mathematical"
    let max = Jstr.v "max"
    let media = Jstr.v "media"
    let method' = Jstr.v "method"
    let min = Jstr.v "min"
    let mode = Jstr.v "mode"
    let name = Jstr.v "name"
    let numoctaves = Jstr.v "numOctaves"
    let offset = Jstr.v "offset"
    let opacity = Jstr.v "opacity"
    let operator = Jstr.v "operator"
    let order = Jstr.v "order"
    let orient = Jstr.v "orient"
    let orientation = Jstr.v "orientation"
    let origin = Jstr.v "origin"
    let overflow = Jstr.v "overflow"
    let overlineposition = Jstr.v "overline-position"
    let overlinethickness = Jstr.v "overline-thickness"
    let panose1 = Jstr.v "panose-1"
    let path = Jstr.v "path"
    let pathlength = Jstr.v "pathLength"
    let patterncontentunits = Jstr.v "patternContentUnits"
    let patterntransform = Jstr.v "patternTransform"
    let patternunits = Jstr.v "patternUnits"
    let pointerevents = Jstr.v "pointer-events"
    let points = Jstr.v "points"
    let pointsatx = Jstr.v "pointsAtX"
    let pointsaty = Jstr.v "pointsAtY"
    let pointsatz = Jstr.v "pointsAtZ"
    let preservealpha = Jstr.v "preserveAlpha"
    let preserveaspectratio = Jstr.v "preserveAspectRatio"
    let primitiveunits = Jstr.v "primitiveUnits"
    let r = Jstr.v "r"
    let radius = Jstr.v "radius"
    let refx = Jstr.v "refX"
    let refy = Jstr.v "refY"
    let renderingintent = Jstr.v "rendering-intent"
    let repeatcount = Jstr.v "repeatCount"
    let repeatdur = Jstr.v "repeatDur"
    let requiredextensions = Jstr.v "requiredExtensions"
    let requiredfeatures = Jstr.v "requiredFeatures"
    let restart = Jstr.v "restart"
    let result = Jstr.v "result"
    let rotate = Jstr.v "rotate"
    let rx = Jstr.v "rx"
    let ry = Jstr.v "ry"
    let scale = Jstr.v "scale"
    let seed = Jstr.v "seed"
    let shaperendering = Jstr.v "shape-rendering"
    let slope = Jstr.v "slope"
    let spacing = Jstr.v "spacing"
    let specularconstant = Jstr.v "specularConstant"
    let specularexponent = Jstr.v "specularExponent"
    let spreadmethod = Jstr.v "spreadMethod"
    let startoffset = Jstr.v "startOffset"
    let stddeviation = Jstr.v "stdDeviation"
    let stemh = Jstr.v "stemh"
    let stemv = Jstr.v "stemv"
    let stitchtiles = Jstr.v "stitchTiles"
    let stopcolor = Jstr.v "stop-color"
    let stopopacity = Jstr.v "stop-opacity"
    let strikethroughposition = Jstr.v "strikethrough-position"
    let strikethroughthickness = Jstr.v "strikethrough-thickness"
    let string = Jstr.v "string"
    let stroke = Jstr.v "stroke"
    let strokedasharray = Jstr.v "stroke-dasharray"
    let strokedashoffset = Jstr.v "stroke-dashoffset"
    let strokelinecap = Jstr.v "stroke-linecap"
    let strokelinejoin = Jstr.v "stroke-linejoin"
    let strokemiterlimit = Jstr.v "stroke-miterlimit"
    let strokeopacity = Jstr.v "stroke-opacity"
    let strokewidth = Jstr.v "stroke-width"
    let style = Jstr.v "style"
    let surfacescale = Jstr.v "surfaceScale"
    let systemlanguage = Jstr.v "systemLanguage"
    let tablevalues = Jstr.v "tableValues"
    let target = Jstr.v "target"
    let targetx = Jstr.v "targetX"
    let targety = Jstr.v "targetY"
    let textanchor = Jstr.v "text-anchor"
    let textdecoration = Jstr.v "text-decoration"
    let textlength = Jstr.v "textLength"
    let textrendering = Jstr.v "text-rendering"
    let title = Jstr.v "title"
    let to' = Jstr.v "to"
    let transform = Jstr.v "transform"
    let type' = Jstr.v "type"
    let u1 = Jstr.v "u1"
    let u2 = Jstr.v "u2"
    let underlineposition = Jstr.v "underline-position"
    let underlinethickness = Jstr.v "underline-thickness"
    let unicode = Jstr.v "unicode"
    let unicodebidi = Jstr.v "unicode-bidi"
    let unicoderange = Jstr.v "unicode-range"
    let unitsperem = Jstr.v "units-per-em"
    let valphabetic = Jstr.v "v-alphabetic"
    let values = Jstr.v "values"
    let version = Jstr.v "version"
    let vertadvy = Jstr.v "vert-adv-y"
    let vertoriginx = Jstr.v "vert-origin-x"
    let vertoriginy = Jstr.v "vert-origin-y"
    let vhanging = Jstr.v "v-hanging"
    let videographic = Jstr.v "v-ideographic"
    let viewbox = Jstr.v "viewBox"
    let viewtarget = Jstr.v "viewTarget"
    let visibility = Jstr.v "visibility"
    let vmathematical = Jstr.v "v-mathematical"
    let width = Jstr.v "width"
    let widths = Jstr.v "widths"
    let wordspacing = Jstr.v "word-spacing"
    let writingmode = Jstr.v "writing-mode"
    let x = Jstr.v "x"
    let x1 = Jstr.v "x1"
    let x2 = Jstr.v "x2"
    let xchannelselector = Jstr.v "xChannelSelector"
    let xheight = Jstr.v "x-height"
    let xlinkactuate = Jstr.v "xlink:actuate"
    let xlinkarcrole = Jstr.v "xlink:arcrole"
    let xlinkhref = Jstr.v "xlink:href"
    let xlinkrole = Jstr.v "xlink:role"
    let xlinkshow = Jstr.v "xlink:show"
    let xlinktitle = Jstr.v "xlink:title"
    let xlinktype = Jstr.v "xlink:type"
    let xmlbase = Jstr.v "xml:base"
    let xmllang = Jstr.v "xml:lang"
    let xmlspace = Jstr.v "xml:space"
    let y = Jstr.v "y"
    let y1 = Jstr.v "y1"
    let y2 = Jstr.v "y2"
    let ychannelselector = Jstr.v "yChannelSelector"
    let z = Jstr.v "z"
    let zoomandpan = Jstr.v "zoomAndPan"
  end

  type ns = NS.t Option.t
  type name = Jstr.t
  type t = ns * name * Jstr.t

  type 'a cons = 'a -> t

  let v ?ns n v = (ns, n, v)

  let accentheight s = v Name.accentheight s
  let accumulate s = v Name.accumulate s
  let additive s = v Name.additive s
  let alignmentbaseline s = v Name.alignmentbaseline s
  let alphabetic s = v Name.alphabetic s
  let amplitude s = v Name.amplitude s
  let arabicform s = v Name.arabicform s
  let ascent s = v Name.ascent s
  let attributename s = v Name.attributename s
  let attributetype s = v Name.attributetype s
  let azimuth s = v Name.azimuth s
  let basefrequency s = v Name.basefrequency s
  let baselineshift s = v Name.baselineshift s
  let baseprofile s = v Name.baseprofile s
  let bbox s = v Name.bbox s
  let begin' s = v Name.begin' s
  let bias s = v Name.bias s
  let by s = v Name.by s
  let calcmode s = v Name.calcmode s
  let capheight s = v Name.capheight s
  let class' s = v Name.class' s
  let clip s = v Name.clip s
  let clippath s = v Name.clippath s
  let clippathunits s = v Name.clippathunits s
  let cliprule s = v Name.cliprule s
  let color s = v Name.color s
  let colorinterpolation s = v Name.colorinterpolation s
  let colorinterpolationfilters s = v Name.colorinterpolationfilters s
  let colorprofile s = v Name.colorprofile s
  let colorrendering s = v Name.colorrendering s
  let contentscripttype s = v Name.contentscripttype s
  let contentstyletype s = v Name.contentstyletype s
  let cursor s = v Name.cursor s
  let cx s = v Name.cx s
  let cy s = v Name.cy s
  let d s = v Name.d s
  let descent s = v Name.descent s
  let diffuseconstant s = v Name.diffuseconstant s
  let direction s = v Name.direction s
  let display s = v Name.display s
  let divisor s = v Name.divisor s
  let dominantbaseline s = v Name.dominantbaseline s
  let dur s = v Name.dur s
  let dx s = v Name.dx s
  let dy s = v Name.dy s
  let edgemode s = v Name.edgemode s
  let elevation s = v Name.elevation s
  let enablebackground s = v Name.enablebackground s
  let end' s = v Name.end' s
  let exponent s = v Name.exponent s
  let externalresourcesrequired s = v Name.externalresourcesrequired s
  let fill s = v Name.fill s
  let fillopacity s = v Name.fillopacity s
  let fillrule s = v Name.fillrule s
  let filter s = v Name.filter s
  let filterres s = v Name.filterres s
  let filterunits s = v Name.filterunits s
  let floodcolor s = v Name.floodcolor s
  let floodopacity s = v Name.floodopacity s
  let fontfamily s = v Name.fontfamily s
  let fontsize s = v Name.fontsize s
  let fontsizeadjust s = v Name.fontsizeadjust s
  let fontstretch s = v Name.fontstretch s
  let fontstyle s = v Name.fontstyle s
  let fontvariant s = v Name.fontvariant s
  let fontweight s = v Name.fontweight s
  let format s = v Name.format s
  let from s = v Name.from s
  let fx s = v Name.fx s
  let fy s = v Name.fy s
  let g1 s = v Name.g1 s
  let g2 s = v Name.g2 s
  let glyphname s = v Name.glyphname s
  let glyphorientationhorizontal s = v Name.glyphorientationhorizontal s
  let glyphorientationvertical s = v Name.glyphorientationvertical s
  let glyphref s = v Name.glyphref s
  let gradienttransform s = v Name.gradienttransform s
  let gradientunits s = v Name.gradientunits s
  let hanging s = v Name.hanging s
  let height s = v Name.height s
  let horizadvx s = v Name.horizadvx s
  let horizoriginx s = v Name.horizoriginx s
  let horizoriginy s = v Name.horizoriginy s
  let id s = v Name.id s
  let ideographic s = v Name.ideographic s
  let imagerendering s = v Name.imagerendering s
  let in' s = v Name.in' s
  let in2 s = v Name.in2 s
  let intercept s = v Name.intercept s
  let k s = v Name.k s
  let k1 s = v Name.k1 s
  let k2 s = v Name.k2 s
  let k3 s = v Name.k3 s
  let k4 s = v Name.k4 s
  let kernelmatrix s = v Name.kernelmatrix s
  let kernelunitlength s = v Name.kernelunitlength s
  let kerning s = v Name.kerning s
  let keypoints s = v Name.keypoints s
  let keysplines s = v Name.keysplines s
  let keyTimes s = v Name.keyTimes s
  let lang s = v Name.lang s
  let lengthadjust s = v Name.lengthadjust s
  let letterspacing s = v Name.letterspacing s
  let lightingcolor s = v Name.lightingcolor s
  let limitingconeangle s = v Name.limitingconeangle s
  let local s = v Name.local s
  let markerend s = v Name.markerend s
  let markerheight s = v Name.markerheight s
  let markermid s = v Name.markermid s
  let markerstart s = v Name.markerstart s
  let markerunits s = v Name.markerunits s
  let markerwidth s = v Name.markerwidth s
  let mask s = v Name.mask s
  let maskcontentunits s = v Name.maskcontentunits s
  let maskunits s = v Name.maskunits s
  let mathematical s = v Name.mathematical s
  let max s = v Name.max s
  let media s = v Name.media s
  let method' s = v Name.method' s
  let min s = v Name.min s
  let mode s = v Name.mode s
  let name s = v Name.name s
  let numoctaves s = v Name.numoctaves s
  let offset s = v Name.offset s
  let opacity s = v Name.opacity s
  let operator s = v Name.operator s
  let order s = v Name.order s
  let orient s = v Name.orient s
  let orientation s = v Name.orientation s
  let origin s = v Name.origin s
  let overflow s = v Name.overflow s
  let overlineposition s = v Name.overlineposition s
  let overlinethickness s = v Name.overlinethickness s
  let panose1 s = v Name.panose1 s
  let path s = v Name.path s
  let pathlength s = v Name.pathlength s
  let patterncontentunits s = v Name.patterncontentunits s
  let patterntransform s = v Name.patterntransform s
  let patternunits s = v Name.patternunits s
  let pointerevents s = v Name.pointerevents s
  let points s = v Name.points s
  let pointsatx s = v Name.pointsatx s
  let pointsaty s = v Name.pointsaty s
  let pointsatz s = v Name.pointsatz s
  let preservealpha s = v Name.preservealpha s
  let preserveaspectratio s = v Name.preserveaspectratio s
  let primitiveunits s = v Name.primitiveunits s
  let r s = v Name.r s
  let radius s = v Name.radius s
  let refx s = v Name.refx s
  let refy s = v Name.refy s
  let renderingintent s = v Name.renderingintent s
  let repeatcount s = v Name.repeatcount s
  let repeatdur s = v Name.repeatdur s
  let requiredextensions s = v Name.requiredextensions s
  let requiredfeatures s = v Name.requiredfeatures s
  let restart s = v Name.restart s
  let result s = v Name.result s
  let rotate s = v Name.rotate s
  let rx s = v Name.rx s
  let ry s = v Name.ry s
  let scale s = v Name.scale s
  let seed s = v Name.seed s
  let shaperendering s = v Name.shaperendering s
  let slope s = v Name.slope s
  let spacing s = v Name.spacing s
  let specularconstant s = v Name.specularconstant s
  let specularexponent s = v Name.specularexponent s
  let spreadmethod s = v Name.spreadmethod s
  let startoffset s = v Name.startoffset s
  let stddeviation s = v Name.stddeviation s
  let stemh s = v Name.stemh s
  let stemv s = v Name.stemv s
  let stitchtiles s = v Name.stitchtiles s
  let stopcolor s = v Name.stopcolor s
  let stopopacity s = v Name.stopopacity s
  let strikethroughposition s = v Name.strikethroughposition s
  let strikethroughthickness s = v Name.strikethroughthickness s
  let string s = v Name.string s
  let stroke s = v Name.stroke s
  let strokedasharray s = v Name.strokedasharray s
  let strokedashoffset s = v Name.strokedashoffset s
  let strokelinecap s = v Name.strokelinecap s
  let strokelinejoin s = v Name.strokelinejoin s
  let strokemiterlimit s = v Name.strokemiterlimit s
  let strokeopacity s = v Name.strokeopacity s
  let strokewidth s = v Name.strokewidth s
  let style s = v Name.style s
  let surfacescale s = v Name.surfacescale s
  let systemlanguage s = v Name.systemlanguage s
  let tablevalues s = v Name.tablevalues s
  let target s = v Name.target s
  let targetx s = v Name.targetx s
  let targety s = v Name.targety s
  let textanchor s = v Name.textanchor s
  let textdecoration s = v Name.textdecoration s
  let textlength s = v Name.textlength s
  let textrendering s = v Name.textrendering s
  let title s = v Name.title s
  let to' s = v Name.to' s
  let transform s = v Name.transform s
  let type' s = v Name.type' s
  let u1 s = v Name.u1 s
  let u2 s = v Name.u2 s
  let underlineposition s = v Name.underlineposition s
  let underlinethickness s = v Name.underlinethickness s
  let unicode s = v Name.unicode s
  let unicodebidi s = v Name.unicodebidi s
  let unicoderange s = v Name.unicoderange s
  let unitsperem s = v Name.unitsperem s
  let valphabetic s = v Name.valphabetic s
  let values s = v Name.values s
  let version s = v Name.version s
  let vertadvy s = v Name.vertadvy s
  let vertoriginx s = v Name.vertoriginx s
  let vertoriginy s = v Name.vertoriginy s
  let vhanging s = v Name.vhanging s
  let videographic s = v Name.videographic s
  let viewbox s = v Name.viewbox s
  let viewtarget s = v Name.viewtarget s
  let visibility s = v Name.visibility s
  let vmathematical s = v Name.vmathematical s
  let width s = v Name.width s
  let widths s = v Name.widths s
  let wordspacing s = v Name.wordspacing s
  let writingmode s = v Name.writingmode s
  let x s = v Name.x s
  let x1 s = v Name.x1 s
  let x2 s = v Name.x2 s
  let xchannelselector s = v Name.xchannelselector s
  let xheight s = v Name.xheight s
  let xlinkactuate s = v ~ns:NS.xlink Name.xlinkactuate s
  let xlinkarcrole s = v ~ns:NS.xlink Name.xlinkarcrole s
  let xlinkhref s = v ~ns:NS.xlink Name.xlinkhref s
  let xlinkrole s = v ~ns:NS.xlink Name.xlinkrole s
  let xlinkshow s = v ~ns:NS.xlink Name.xlinkshow s
  let xlinktitle s = v ~ns:NS.xlink Name.xlinktitle s
  let xlinktype s = v ~ns:NS.xlink Name.xlinktype s
  let xmlbase s = v ~ns:NS.xml Name.xmlbase s
  let xmllang s = v ~ns:NS.xml Name.xmllang s
  let xmlspace s = v ~ns:NS.xml Name.xmlspace s
  let y s = v Name.y s
  let y1 s = v Name.y1 s
  let y2 s = v Name.y2 s
  let ychannelselector s = v Name.ychannelselector s
  let z s = v Name.z s
  let zoomandpan s = v Name.zoomandpan s
end

module El = struct
  module Name = struct
    let a = Jstr.v "a"
    let altglyph = Jstr.v "altGlyph"
    let altglyphdef = Jstr.v "altGlyphDef"
    let altglyphitem = Jstr.v "altGlyphItem"
    let animate = Jstr.v "animate"
    let animatecolor = Jstr.v "animateColor"
    let animatemotion = Jstr.v "animateMotion"
    let animatetransform = Jstr.v "animateTransform"
    let circle = Jstr.v "circle"
    let clippath = Jstr.v "clipPath"
    let colorprofile = Jstr.v "color-profile"
    let cursor = Jstr.v "cursor"
    let defs = Jstr.v "defs"
    let desc = Jstr.v "desc"
    let ellipse = Jstr.v "ellipse"
    let feblend = Jstr.v "feBlend"
    let fecolormatrix = Jstr.v "feColorMatrix"
    let fecomponenttransfer = Jstr.v "feComponentTransfer"
    let fecomposite = Jstr.v "feComposite"
    let feconvolvematrix = Jstr.v "feConvolveMatrix"
    let fediffuselighting = Jstr.v "feDiffuseLighting"
    let fedisplacementmap = Jstr.v "feDisplacementMap"
    let fedistantlight = Jstr.v "feDistantLight"
    let feflood = Jstr.v "feFlood"
    let fefunca = Jstr.v "feFuncA"
    let fefuncb = Jstr.v "feFuncB"
    let fefuncg = Jstr.v "feFuncG"
    let fefuncr = Jstr.v "feFuncR"
    let fegaussianblur = Jstr.v "feGaussianBlur"
    let feimage = Jstr.v "feImage"
    let femerge = Jstr.v "feMerge"
    let femergenode = Jstr.v "feMergeNode"
    let femorphology = Jstr.v "feMorphology"
    let feoffset = Jstr.v "feOffset"
    let fepointlight = Jstr.v "fePointLight"
    let fespecularlighting = Jstr.v "feSpecularLighting"
    let fespotlight = Jstr.v "feSpotLight"
    let fetile = Jstr.v "feTile"
    let feturbulence = Jstr.v "feTurbulence"
    let filter = Jstr.v "filter"
    let font = Jstr.v "font"
    let fontface = Jstr.v "fontFace"
    let fontfaceformat = Jstr.v "fontFaceFormat"
    let fontfacename = Jstr.v "fontFaceName"
    let fontfacesrc = Jstr.v "fontFaceSrc"
    let fontfaceuri = Jstr.v "fontFaceUri"
    let foreignobject = Jstr.v "foreignObject"
    let g = Jstr.v "g"
    let glyph = Jstr.v "glyph"
    let glyphref = Jstr.v "glyphRef"
    let hkern = Jstr.v "hkern"
    let image = Jstr.v "image"
    let line = Jstr.v "line"
    let lineargradient = Jstr.v "linearGradient"
    let marker = Jstr.v "marker"
    let mask = Jstr.v "mask"
    let metadata = Jstr.v "metadata"
    let missingglyph = Jstr.v "missingGlyph"
    let mpath = Jstr.v "mpath"
    let path = Jstr.v "path"
    let pattern = Jstr.v "pattern"
    let polygon = Jstr.v "svpolygong"
    let polyline = Jstr.v "polyline"
    let radialgradient = Jstr.v "radialGradient"
    let rect = Jstr.v "rect"
    let script = Jstr.v "script"
    let set = Jstr.v "set"
    let stop = Jstr.v "stop"
    let style = Jstr.v "style"
    let svg = Jstr.v "svg"
    let switch = Jstr.v "switch"
    let symbol = Jstr.v "symbol"
    let text' = Jstr.v "text'"
    let textpath = Jstr.v "textPath"
    let title = Jstr.v "title"
    let tref = Jstr.v "tref"
    let tspan = Jstr.v "tspan"
    let use = Jstr.v "use"
    let view = Jstr.v "view"
    let vkern = Jstr.v "vkern"
  end

  type document = Jv.t

  type node_name = Jstr.t

  type t = Jv.t

  let global_document = Jv.get Jv.global "document"

  let append_child e n = ignore (Jv.call e "appendChild" [| n |])

  let set_at e (ns, a, v) = match Jstr.equal a At.Name.class' with
  | false -> ignore (Jv.call e "setAttributeNS" Jv.[|of_option ~none:undefined of_jstr ns; of_jstr a; of_jstr v|])
  | true when Jstr.is_empty v -> ()
  | true -> ignore (Jv.call (Jv.get e "classList") "add" [| Jv.of_jstr v |])

  let v ?(d:document = global_document) ?(at:At.t list = []) name cs =
    let e = Jv.call d "createElementNS" [| Jv.of_jstr (Jstr.v "http://www.w3.org/2000/svg"); Jv.of_jstr name |] in
    List.iter (set_at e) at;
    List.iter (append_child e) cs;
    e

  let txt ?(d = global_document) s : t =
    Jv.call d "createTextNode" [|Jv.of_jstr s|]

  let txt' ?(d = global_document) s : t =
    Jv.call d "createTextNode" [| Jv.of_string s |]

  type cons = ?d:document -> ?at:At.t list -> t list -> t

  let cons name ?d ?at cs = v ?d ?at name cs

  let a = cons Name.a
  let altglyph = cons Name.altglyph
  let altglyphdef = cons Name.altglyphdef
  let altglyphitem = cons Name.altglyphitem
  let animate = cons Name.animate
  let animatecolor = cons Name.animatecolor
  let animatemotion = cons Name.animatemotion
  let animatetransform = cons Name.animatetransform
  let circle = cons Name.circle
  let clippath = cons Name.clippath
  let colorprofile = cons Name.colorprofile
  let cursor = cons Name.cursor
  let defs = cons Name.defs
  let desc = cons Name.desc
  let ellipse = cons Name.ellipse
  let feblend = cons Name.feblend
  let fecolormatrix = cons Name.fecolormatrix
  let fecomponenttransfer = cons Name.fecomponenttransfer
  let fecomposite = cons Name.fecomposite
  let feconvolvematrix = cons Name.feconvolvematrix
  let fediffuselighting = cons Name.fediffuselighting
  let fedisplacementmap = cons Name.fedisplacementmap
  let fedistantlight = cons Name.fedistantlight
  let feflood = cons Name.feflood
  let fefunca = cons Name.fefunca
  let fefuncb = cons Name.fefuncb
  let fefuncg = cons Name.fefuncg
  let fefuncr = cons Name.fefuncr
  let fegaussianblur = cons Name.fegaussianblur
  let feimage = cons Name.feimage
  let femerge = cons Name.femerge
  let femergenode = cons Name.femergenode
  let femorphology = cons Name.femorphology
  let feoffset = cons Name.feoffset
  let fepointlight = cons Name.fepointlight
  let fespecularlighting = cons Name.fespecularlighting
  let fespotlight = cons Name.fespotlight
  let fetile = cons Name.fetile
  let feturbulence = cons Name.feturbulence
  let filter = cons Name.filter
  let font = cons Name.font
  let fontface = cons Name.fontface
  let fontfaceformat = cons Name.fontfaceformat
  let fontfacename = cons Name.fontfacename
  let fontfacesrc = cons Name.fontfacesrc
  let fontfaceuri = cons Name.fontfaceuri
  let foreignobject = cons Name.foreignobject
  let g = cons Name.g
  let glyph = cons Name.glyph
  let glyphref = cons Name.glyphref
  let hkern = cons Name.hkern
  let image = cons Name.image
  let line = cons Name.line
  let lineargradient = cons Name.lineargradient
  let marker = cons Name.marker
  let mask = cons Name.mask
  let metadata = cons Name.metadata
  let missingglyph = cons Name.missingglyph
  let mpath = cons Name.mpath
  let path = cons Name.path
  let pattern = cons Name.pattern
  let polygon = cons Name.polygon
  let polyline = cons Name.polyline
  let radialgradient = cons Name.radialgradient
  let rect = cons Name.rect
  let script = cons Name.script
  let set = cons Name.set
  let stop = cons Name.stop
  let style = cons Name.style
  let svg = cons Name.svg
  let switch = cons Name.switch
  let symbol = cons Name.symbol
  let text' = cons Name.text'
  let textpath = cons Name.textpath
  let title = cons Name.title
  let tref = cons Name.tref
  let tspan = cons Name.tspan
  let use = cons Name.use
  let view = cons Name.view
  let vkern = cons Name.vkern
end
